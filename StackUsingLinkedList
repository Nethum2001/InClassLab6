// Online C++ compiler to run C++ program online
#include <iostream>
#include <chrono>
using namespace std;
using namespace chrono;
#define max 500

class Node{
    public:
        int data;
        Node* pointer;
        Node(int n){
            this->data = n;
            this->pointer = NULL;
        }
};

class Stack{
    Node* top;
    public:
        Stack() {top = NULL;}
        void Push(int data){
            Node* temp = new Node(data);
            if (!temp){
                cout<<"Stack overflow";
                exit(1);
            }
            temp->data = data;
            temp->pointer = top;
            top = temp;
        }
        bool isEmpty(){
            if (top==NULL){
                return true;
            }
            else {
                return false;
            }
        }
        bool isFull(){
            Node* temp;
            if (!temp){
                return true;
            }
            else{
                return false;
            }
        }
        void Pop(){
            Node* temp;
            if (top == NULL) {
                cout<<"Stack Underflow"<<endl;
                exit(1);
            }
            else{
                temp = top;
                top = top->pointer;
                free(temp);
            }
        }
        void Display(){
            Node* temp;
            if (top == NULL) {
                cout<<"Stack Underflow"<< endl;;
                exit(1);
            }
            else {
                temp = top;
                while (temp != NULL) {
                    cout << temp->data<<" ";
                    temp = temp->pointer;
                }
                cout<<endl;
            }
        }
};

int main() {
    auto start = high_resolution_clock::now();
    class Stack s;
    s.Push(8);
    s.Push(10);
    s.Push(5);
    s.Push(11);
    s.Push(15);
    s.Push(23);
    s.Push(6);
    s.Push(18);
    s.Push(20);
    s.Push(17);
    s.Display();
    s.Pop();
    s.Pop();
    s.Pop();
    s.Pop();
    s.Pop();
    s.Display();
    s.Push(4);
    s.Push(30);
    s.Push(3);
    s.Push(1);
    s.Display();
    auto end = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(end - start);
    cout<<"Time taken to implement stack = "<<duration.count()<<" microseconds";
    return 0;
}
